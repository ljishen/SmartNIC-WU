#!/usr/bin/env -S gnuplot --persist -c
#
# This script box plots the result generated by script
# summarize_all_platforms.sh in the format of SVG.
#
# Prerequisites:
#   GNU Coreutils >= 8.30
#     env supports the -S/--split-string=S option to split a single
#     argument string into multiple arguments.
#     https://github.com/coreutils/coreutils/blob/master/NEWS
#   gnuplot >= 5.2
#     1. support passing parameters to a gnuplot script (ie. ARGC)
#     http://www.gnuplot.info/ReleaseNotes_5_0_7.html
#
#     2. GPVAL_SYSTEM_ERRNO
#     http://www.gnuplot.info/docs_5.2/Gnuplot_5.2.pdf, p201

if (ARGC != 1) {
  print sprintf("Usage:    %s DATAFILE\n",ARG0)
  print \
    "DATAFILE:\n", \
    "    a datafile summarizes results from all platforms,\n", \
    "    typically ending with '.platforms_summary'."
  exit
}

datafile = ARG1
system("test -f ".datafile)
if (GPVAL_SYSTEM_ERRNO != 0) {
  printerr sprintf("[ERROR] Cannot find datafile: %s",datafile)
  exit status GPVAL_SYSTEM_ERRNO
}


output_filepath = datafile.".svg"
set output output_filepath

# skip the column header so it won't be used as data
#   https://stackoverflow.com/a/35528422
set key autotitle columnhead
unset key

set border 10 front linetype black linewidth 1.000 dashtype solid
set boxwidth 0.5 absolute
set pointsize 0.5
set style fill solid 0.50 border lt -1
set style data boxplot
set style boxplot range 1.5 outliers pointtype 7 candlesticks

set xtics border nomirror in scale 0,0 rotate autojustify rangelimited
set ytics border mirror in scale 1.0,0.5 norotate autojustify
set y2tics border
set grid xtics ytics

set ylabel "z-score" font ",15"

data_header = system("grep --max-count=1 '^[^#]' ".datafile)
NF = words(data_header)

SKIP_COLUMNS = 1
STRESSORS_PER_PLOT=32
num_stressors = NF - SKIP_COLUMNS
num_plots = ceil(num_stressors * 1.0 / STRESSORS_PER_PLOT)

set terminal svg enhanced font "arial,12" fontscale 1.0 size 800,400*num_plots
set multiplot layout num_plots,1 title \
  "Distribution of energy usage explicitly ordered by name of energy source\n"

zscore(val) = strstrt(val, "nan") != 0 \
  ? 0 : real(substr(val, strstrt(val, "/")+1, -1))

do for [p=1:num_plots] {
  start_col_cur_plot = (p - 1) * STRESSORS_PER_PLOT + SKIP_COLUMNS + 1
  end_col_cur_plot = STRESSORS_PER_PLOT * p > num_stressors \
    ? NF : start_col_cur_plot + STRESSORS_PER_PLOT - 1

  set xtics auto
  set xrange [0:end_col_cur_plot-start_col_cur_plot+2] noreverse writeback

  set for [i=1:end_col_cur_plot-start_col_cur_plot+1] \
    xtics add (word(data_header, start_col_cur_plot+(i-1)) i)
  plot for [i=1:end_col_cur_plot-start_col_cur_plot+1] \
    datafile using (i):(zscore(strcol(start_col_cur_plot+(i-1))))
}

print "Written to output file: ".output_filepath
